import Promise from "bluebird"
import {
    merge,
} from "lodash"

import ROUTES from "./ROUTES.json"

let _resolveCoreAPI,
    _rejectCoreAPI,
    _coreAPIConfig
const _promiseCoreAPI = new Promise((resolve, reject) => {
    _resolveCoreAPI = resolve
    _rejectCoreAPI = reject
})

export function api(route) {

    return _promiseCoreAPI
        .then(config => {
            const url = `${config.baseURL}${route.uri}`
            return function transport(opts) {
                const combinedOpts = merge({}, config, opts, {
                    headers: new Headers(merge({
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }, config.headers, opts.headers)),
                    method: route.method,
                })
                return fetch(url, combinedOpts)
                    .then(response => {
                        return response.ok 
                            ? response
                            : Promise.reject(response)
                    })
            }
        })
}

/**
 * 
 * @param {Object} config
 * @param {String} config.url - environment defined url
 * @param {Object} config.headers - default headers
 * @returns {Object} coreapi http interface
 * @desc initialization a coreapi http interface
 * @example
 * import coreAPI from "~/coreapi/http"
 * 
 * coreAPI.init({
 *   url: "https://local-coreapi.bringhub.dev",
 *   headers: {
 *     "X-Session-ID": "x1234-9876-42324-asdf"
 *   }
 * })
 */
export function init({
    url,
    headers = {},
}) {
    if (!url)
        throw new Error("coreAPI.init requires a url")
    if (_coreAPIConfig)
        throw new Error("coreAPI already initialized")
    _resolveCoreAPI(_coreAPIConfig = {
        baseURL: url,
        headers,
    })
}