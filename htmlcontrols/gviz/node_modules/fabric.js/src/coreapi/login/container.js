import m from "mithril"
import classNames from "classnames"

import { connect } from './store'
import {
    LOGIN_DOM_ID,
    LOGIN_EMAIL_INPUT,
    LOGIN_PASSWORD_INPUT,
} from "./constants"
import {
    Button,
    Icon,
    Spinner,
    TextField,
} from "../../mdl"
import {
    LoginWithCredentials,
    ValidateLoginForm,
} from './actions'
import {
    onInput,
} from "../helpers"
import {
    BringhubLogo,
} from "../../bh/logo"

export const LoginContainer = connect(
    (reducerStates) => {
        return {
            login: reducerStates.login,
            config: reducerStates.config,
        }
    },
    {
        LoginWithCredentials,
        ValidateLoginForm,
        onInputEmail: onInput(LOGIN_EMAIL_INPUT),
        onInputPassword: onInput(LOGIN_PASSWORD_INPUT),
    }
)({

    onSubmit(event, vnode) {

        event.preventDefault()
        const {
            email,
            password,
        } = vnode.attrs.login
        const {
            LoginWithCredentials,
        } = vnode.attrs.actions
        LoginWithCredentials({
            email,
            password,
        })
    },

    onInput(event, vnode, inputAction) {

        const {
            ValidateLoginForm,
        } = vnode.attrs.actions
        inputAction(event)
        ValidateLoginForm()
    },

    renderSuccess(data) {

        return (
            <span>
                <Icon type={"mood"}
                    className={"mdl-button--colored"} />
                <p>{data.message}</p>
            </span>
        )
    },

    renderError(err) {

        if (!err)
            return null
        return (
            <div className={`${LOGIN_DOM_ID}-error`}>
                <h5>Login Error</h5>
                <p>{err.message}</p>
            </div>
        )
    },

    tryRedirect(vnode) {

        const {
            onAuthenticated,
        } = vnode.attrs.config

        if ("function" === typeof onAuthenticated) {
            const {
                data,
            } = vnode.attrs.login
            setTimeout(_ => {
                onAuthenticated(data)
            })
        }
    },

    view(vnode) {

        //console.log("  login.view", vnode.attrs, JSON.stringify(vnode.attrs, null, 2))
        const {
            isBusy,
            err,
            data,
            formIsValid,
            formErrors,
        } = vnode.attrs.login
        const {
            onInputEmail,
            onInputPassword,
        } = vnode.attrs.actions
        const isSubmitDisabled = !formIsValid,
            loginSuccess = !err && data,
            classes = classNames(
                LOGIN_DOM_ID,
                {
                    [`${LOGIN_DOM_ID}-is-busy`]: isBusy,
                },
                {
                    [`${LOGIN_DOM_ID}-has-error`]: err,
                },
                {
                    [`${LOGIN_DOM_ID}-is-success`]: loginSuccess,
                }
            )
        if (loginSuccess)
            this.tryRedirect(vnode)

        return (
            <div className={classes}>
                <div className={`${LOGIN_DOM_ID}-form-container`}>
                    <BringhubLogo />
                    <div className={`${LOGIN_DOM_ID}-success`}>
                        {loginSuccess
                            ? this.renderSuccess(data)
                            : null}
                    </div>
                    <form onsubmit={event => this.onSubmit(event, vnode)}
                        className={`${LOGIN_DOM_ID}-form`}>
                        <TextField type="email"
                            name="email"
                            pattern="^[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]{2,4}$"
                            error="a valid email address is required"
                            oninput={event => this.onInput(event, vnode, onInputEmail)}
                            label="Email"
                            required
                            className="mdl-textfield--floating-label" />

                        <TextField type="password"
                            name="password"
                            pattern=".{6,}"
                            error="a minimum of 6 characters is required"
                            oninput={event => this.onInput(event, vnode, onInputPassword)}
                            label="Password"
                            required
                            className="mdl-textfield--floating-label" />

                        <Button type="submit"
                            disabled={isSubmitDisabled}
                            className="mdl-button--raised mdl-button--colored">
                            Login
                        </Button>
                    </form>
                </div>
                <div className={`${LOGIN_DOM_ID}-result`}>
                    {isBusy
                        ? <Spinner active={true} />
                        : this.renderError(err)}
                </div>

            </div>
        )
    }
})