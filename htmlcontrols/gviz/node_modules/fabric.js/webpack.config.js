var webpack = require("webpack");
var path = require("path");
var CopyWebpackPlugin = require('copy-webpack-plugin');
var ExtractTextPlugin = require("extract-text-webpack-plugin");
var entries = require("./examples/entries.js");

module.exports = {
  devtool: 'source-map',
  entry: entries,
  output: {
    filename: "[name]",
    path: path.resolve(__dirname, "dist")
  },
  plugins: [
    new webpack.optimize.UglifyJsPlugin({
      compress: false,
      mangle: false,
      sourceMap: false,
    }),
    new ExtractTextPlugin({
     filename: '[name]',
     publicPath: '/',
     allChunks: true
   }),
    new CopyWebpackPlugin([{
      from: "./examples",
      to: ""
    }], {
      ignore: [
        "**/*.scss",
        "**/*.js",
      ]
    })
  ],
  module: {
    rules: [{
      test: /\.js$/,
      include: [
        /examples/,
        /src/,
        /(node_modules)\/midux/,
      ],
      use: [{
        loader: 'babel-loader',
        options: {
          presets: [['es2015', {modules: false}], 'stage-0', 'react'],
          plugins: [
            ["babel-plugin-root-import", {
              "rootPathSuffix": "./src"
            }],
            'syntax-dynamic-import',
            ["transform-react-jsx", {
              "pragma": "m"
            }]
          ]
        }
      }]
    },
    {
      test: /\.scss$/,
      use: ExtractTextPlugin.extract({
        fallback: "style-loader",
        use:
        [{
          loader: "css-loader",
          options: { sourceMap: true }
      	},
        {
          loader: "sass-loader",
          options: {
            sourceMap: true,
            includePaths: [
              require("bourbon").includePaths,
            ]
          }
        }]
      })
    }, {
      test: /\.woff(\?v=\d+\.\d+\.\d+)?$/,
      use: "url-loader?limit=10000&mimetype=application/font-woff"
    }, {
      test: /\.woff2(\?v=\d+\.\d+\.\d+)?$/,
      use: "url-loader?limit=10000&mimetype=application/font-woff"
    }, {
      test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/,
      use: "url-loader?limit=10000&mimetype=application/octet-stream"
    }, {
      test: /\.eot(\?v=\d+\.\d+\.\d+)?$/,
      use: "file-loader"
    }, {
      test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
      use: "url-loader?limit=10000&mimetype=image/svg+xml"
    }]
  },

};
